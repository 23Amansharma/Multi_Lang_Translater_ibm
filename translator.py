# -*- coding: utf-8 -*-
"""Copy of AI_Powered_MultiLang_model1.ipynb
Automatically generated by Colab.
Original file is located at
    https://colab.research.google.com/drive/1-slZibNwAvUjXb0_64CJ36cZSXv7a1az
"""

# ‚úÖ Install dependencies
import os
from transformers import M2M100ForConditionalGeneration, M2M100Tokenizer
import gradio as gr
from langdetect import detect
from indic_transliteration import sanscript
import time

os.environ.pop("HUGGINGFACE_TOKEN", None)

# ‚úÖ Load tokenizer and model
model_name = "facebook/m2m100_418M"
tokenizer = M2M100Tokenizer.from_pretrained(model_name)
model = M2M100ForConditionalGeneration.from_pretrained(model_name)

print("‚úÖ Model and tokenizer loaded!")

# Map language codes to full names
language_map = {
    "en": "English",
    "hi": "Hindi",
    "fr": "French",
    "de": "German",
    "es": "Spanish",
    "zh": "Chinese",
    "ja": "Japanese",
    "ko": "Korean",
    "mr": "Marathi",
    "gu": "Gujarati",
    "ta": "Tamil",
    "ml": "Malayalam"
}

src_langs = list(language_map.keys())
full_src_langs = list(language_map.values())
src_langs_with_auto = ["Auto Detect"] + full_src_langs

def translate_with_full_names(text, src_lang_full, tgt_lang_full, progress=gr.Progress()):
    # Convert full names back to codes for the model
    src_lang = None
    processed_text = text

    progress(0, desc="Starting translation...")

    if src_lang_full == "Auto Detect":
        progress(0.1, desc="Detecting language...")
        try:
            detected_lang_code = detect(text)
            if detected_lang_code == "hi":
                if any(c.isalpha() for c in text):
                    progress(0.2, desc="Transliterating Roman Hindi...")
                    try:
                        processed_text = sanscript.transliterate(text, sanscript.IAST, sanscript.DEVANAGARI)
                        src_lang = "hi"
                        progress(0.3, desc="Transliteration complete.")
                    except Exception as e:
                        print(f"Error during transliteration: {e}")
                        processed_text = text
                        src_lang = detected_lang_code
                        progress(0.3, desc="Transliteration failed, continuing with original text.")
                else:
                    processed_text = text
                    src_lang = detected_lang_code
                    progress(0.3, desc="Detected Devanagari Hindi.")
            else:
                processed_text = text
                src_lang = detected_lang_code
                progress(0.3, desc=f"Detected language: {language_map.get(detected_lang_code, detected_lang_code)}")

        except Exception as e:
            print(f"Language detection failed: {e}")
            processed_text = text
            src_lang = "en"
            progress(0.3, desc="Language detection failed, defaulting to English.")
    else:
        src_lang_list = [code for code, full in language_map.items() if full == src_lang_full]
        if src_lang_list:
            src_lang = src_lang_list[0]
            processed_text = text
            progress(0.3, desc=f"Source language set to: {src_lang_full}")
        else:
            print(f"Warning: Could not find language code for source language: {src_lang_full}")
            progress(1.0, desc="Error")
            return "Error: Invalid source language selected."

    tgt_lang_list = [code for code, full in language_map.items() if full == tgt_lang_full]
    if tgt_lang_list:
        tgt_lang = tgt_lang_list[0]
        progress(0.4, desc=f"Target language set to: {tgt_lang_full}")
    else:
        print(f"Warning: Could not find language code for target language: {tgt_lang_full}")
        progress(1.0, desc="Error")
        return "Error: Invalid target language selected."

    try:
        progress(0.5, desc="Encoding text...")
        tokenizer.src_lang = src_lang
        encoded = tokenizer(processed_text, return_tensors="pt")
        progress(0.6, desc="Generating translation tokens...")
        generated_tokens = model.generate(
            **encoded,
            forced_bos_token_id=tokenizer.get_lang_id(tgt_lang)
        )
        progress(0.9, desc="Decoding generated tokens...")
        translated = tokenizer.batch_decode(generated_tokens, skip_special_tokens=True)
        progress(1.0, desc="Translation complete!")
        return translated[0]
    except Exception as e:
        print(f"Error during translation: {e}")
        progress(1.0, desc="Error")
        return "Error during translation. Please try again."

def swap_languages(src, tgt):
    if src == "Auto Detect":
        return tgt, "Auto Detect"
    elif tgt == "Auto Detect":
         return "Auto Detect", src
    else:
        return tgt, src

with gr.Blocks(theme=gr.themes.Soft()) as demo:
    demo.css = """
    body {
        background: linear-gradient(to bottom right, #e0f7fa, #b2ebf2);
        font-family: 'Roboto', sans-serif;
    }
    .gradio-container {
        background-color: #ffffff;
        border-radius: 12px;
        padding: 25px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        max-width: 900px;
        margin: 20px auto;
    }
    h1 {
        color: #0288d1;
        text-align: center;
        margin-bottom: 30px;
        font-size: 2.2em;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.05);
    }
    .gr-dropdown, .gr-textbox, .gr-button {
        margin-bottom: 15px;
    }
    .gr-textbox textarea {
        border-radius: 8px;
        border: 1px solid #b0bec5;
        padding: 10px;
        font-size: 1.1em;
    }
    .gr-button {
        border-radius: 8px;
        padding: 10px 20px;
        font-size: 1.1em;
        transition: background-color 0.3s ease, box-shadow 0.3s ease;
    }
    .gr-button.gr-button-primary {
        background-color: #007bff;
        color: white;
        border: none;
        box-shadow: 0 2px 4px rgba(0, 123, 255, 0.3);
    }
    .gr-button.gr-button-primary:hover {
        background-color: #0056b3;
        box-shadow: 0 4px 8px rgba(0, 123, 255, 0.4);
    }
    .gr-button:not(.gr-button-primary) {
        background-color: #e0e0e0;
        color: #333;
        border: 1px solid #ccc;
    }
     .gr-button:not(.gr-button-primary):hover {
        background-color: #d5d5d5;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .gr-label {
        font-weight: bold;
        color: #555;
        margin-bottom: 5px;
        display: block;
    }
    .gr-dropdown label, .gr-textbox label {
        font-weight: bold;
        color: #555;
    }
    .gr-column {
        padding: 10px;
    }
    .gr-row {
        align-items: center;
    }
    #translation-output-area {
        background-color: #fffacd;
        border: 1px solid #ffeb3b;
        border-radius: 8px;
        padding: 10px;
        margin-top: 0px;
    }
    #original-input-display {
        font-style: italic;
        color: #777;
        margin-bottom: 10px;
        padding-bottom: 10px;
        border-bottom: 1px solid #ccc;
        display: none;
    }
    #loading-animation-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100px;
    }
    #panda-loading-image {
        max-width: 100%;
        max-height: 100%;
    }
    """
    gr.Markdown("# üåç Multi-Language Translator (M2M100)")

    with gr.Row():
        with gr.Column(scale=1):
            src = gr.Dropdown(choices=src_langs_with_auto, value="Auto Detect", label="‚û°Ô∏è Source Language")
        with gr.Column(scale=1, min_width=50):
            swap_btn = gr.Button("üîÑ Swap Languages")
        with gr.Column(scale=1):
            tgt = gr.Dropdown(choices=full_src_langs, value="Hindi", label="‚¨ÖÔ∏è Target Language")

    with gr.Row():
        with gr.Column():
            input_text = gr.Textbox(label="‚úçÔ∏è Enter text to translate", lines=5, placeholder="Enter text")
        with gr.Column() as output_column:
            original_input_display = gr.Textbox(label="Original Input", lines=2, interactive=False, elem_id="original-input-display", visible=False)
            with gr.Column(elem_id="loading-animation-container", visible=False) as loading_animation_container:
                panda_animation = gr.Image(value="https://media.giphy.com/media/v1.resize/v1.gifs/mjjxS7mY0qQJgP5W57/giphy.gif", label="Translating...", show_label=True, interactive=False, elem_id="panda-loading-image")
            output = gr.Textbox(label="‚ú® Translation Output", lines=5, interactive=False, elem_id="translation-output-area")

    with gr.Row():
        with gr.Column():
            translate_btn = gr.Button("‚úÖ Translate", variant="primary")

    translate_btn.click(
        fn=lambda text, src, tgt: (
            gr.update(visible=True),
            gr.update(visible=False),
            translate_with_full_names(text, src, tgt)
        ),
        inputs=[input_text, src, tgt],
        outputs=[loading_animation_container, output, output]
    ).then(
        fn=lambda translated_text: (
            gr.update(value=translated_text, visible=True),
            gr.update(visible=False)
        ),
        inputs=[output],
        outputs=[output, loading_animation_container]
    )

    swap_btn.click(swap_languages, inputs=[src, tgt], outputs=[src, tgt])

demo.launch(share=True)

